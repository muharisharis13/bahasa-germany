"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/materi1/page",{

/***/ "(app-pages-browser)/./app/materi1/page.tsx":
/*!******************************!*\
  !*** ./app/materi1/page.tsx ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Materi1; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ \"(app-pages-browser)/./node_modules/next/dist/api/link.js\");\n/* harmony import */ var _public_background_materi_jpg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/public/background_materi.jpg */ \"(app-pages-browser)/./public/background_materi.jpg\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\nfunction Materi1() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"   bg-slate-200\",\n        style: {\n            backgroundImage: \"url(\".concat(_public_background_materi_jpg__WEBPACK_IMPORTED_MODULE_2__[\"default\"].src, \")\"),\n            backgroundRepeat: \"repeat\",\n            backgroundSize: \"50%\",\n            backgroundPosition: \"center\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n            className: \"bg-white/95 backdrop-blur-sm shadow-lg max-w-full lg:max-w-6xl m-auto\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \" px-2 lg:px-10 py-12 mx-auto  h-full \",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \" h-full overflow-y-auto text-justify  min-h-[100vh] text-2xl\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"header1 font-bold text-3xl items-center text-center mb-5\",\n                                children: \"Die Pr\\xe4positionen\"\n                            }, void 0, false, {\n                                fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n                                lineNumber: 711,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"mb-5\",\n                                children: \"Pr\\xe4positionen sind W\\xf6rter, die in der Regel vor einer Substantivphrase stehen und diese mit anderen W\\xf6rtern im Satz verbinden, wie z. B. im Indonesischen di, ke, dari. Im Deutschen folgt auf Pr\\xe4positionen immer ein Kasus, entweder der Akkusativ, Dativ, Akkusativ-Dativ oder Genitiv. Pr\\xe4positionen ver\\xe4ndern die Form von Pronomen, Artikeln, Deklinationen und Adverbien.\"\n                            }, void 0, false, {\n                                fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n                                lineNumber: 714,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n                        lineNumber: 710,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"inline-flex w-full  sm:w-auto\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                            href: \"/latihan1\",\n                            className: \"inline-flex items-center justify-center w-full px-6 py-2 text-white duration-300 bg-blue-600 rounded-lg hover:bg-blue-500 focus:ring focus:ring-blue-300 focus:ring-opacity-80\",\n                            children: \"\\xdcbung\"\n                        }, void 0, false, {\n                            fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n                            lineNumber: 725,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n                        lineNumber: 724,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n                lineNumber: 709,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n            lineNumber: 17,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/macbookpro/Desktop/Skripsi/bahasa-germany/app/materi1/page.tsx\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n}\n_c = Materi1;\nvar _c;\n$RefreshReg$(_c, \"Materi1\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9tYXRlcmkxL3BhZ2UudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRTZCO0FBQ3lCO0FBRXZDLFNBQVNFO0lBQ3RCLHFCQUNFLDhEQUFDQztRQUNDQyxXQUFVO1FBQ1ZDLE9BQU87WUFDTEMsaUJBQWlCLE9BQW9CLE9BQWJMLHFFQUFRQSxDQUFDTSxHQUFHLEVBQUM7WUFDckNDLGtCQUFrQjtZQUNsQkMsZ0JBQWdCO1lBQ2hCQyxvQkFBb0I7UUFDdEI7a0JBRUEsNEVBQUNDO1lBQVFQLFdBQVU7c0JBb3JCakIsNEVBQUNEO2dCQUFJQyxXQUFVOztrQ0FDYiw4REFBQ0Q7d0JBQUlDLFdBQVU7OzBDQUNiLDhEQUFDRDtnQ0FBSUMsV0FBVTswQ0FBMkQ7Ozs7OzswQ0FHMUUsOERBQUNEO2dDQUFJQyxXQUFVOzBDQUFPOzs7Ozs7Ozs7Ozs7a0NBVXhCLDhEQUFDRDt3QkFBSUMsV0FBVTtrQ0FDYiw0RUFBQ0osaURBQUlBOzRCQUNIWSxNQUFLOzRCQUNMUixXQUFVO3NDQUNYOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRYjtLQTF0QndCRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvbWF0ZXJpMS9wYWdlLnRzeD9hYjAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuaW1wb3J0IEltYWdlIGZyb20gXCJuZXh0L2ltYWdlXCI7XG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgYmdNYXRlcmkgZnJvbSBcIkAvcHVibGljL2JhY2tncm91bmRfbWF0ZXJpLmpwZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXRlcmkxKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cIiAgIGJnLXNsYXRlLTIwMFwiXG4gICAgICBzdHlsZT17e1xuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtiZ01hdGVyaS5zcmN9KWAsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXQ6IFwicmVwZWF0XCIsXG4gICAgICAgIGJhY2tncm91bmRTaXplOiBcIjUwJVwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiY2VudGVyXCIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImJnLXdoaXRlLzk1IGJhY2tkcm9wLWJsdXItc20gc2hhZG93LWxnIG1heC13LWZ1bGwgbGc6bWF4LXctNnhsIG0tYXV0b1wiPlxuICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9XCIgcHgtMiBsZzpweC0xMCBweS0xMiBteC1hdXRvICBoLWZ1bGxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIiBoLWZ1bGwgb3ZlcmZsb3cteS1hdXRvIHRleHQtanVzdGlmeSAgbWluLWgtWzEwMHZoXVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXIxIGZvbnQtYm9sZCB0ZXh0LTN4bCBpdGVtcy1jZW50ZXIgdGV4dC1jZW50ZXIgbWItNVwiPlxuICAgICAgICAgICAgICBCQUIgSSBQUkVQT1NJU0kgPGk+KGRpZSBQcsOkcG9zaXRpb25lbik8L2k+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9pbnQxIG1iLTVcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LW1kIGZvbnQtYm9sZFwiPlxuICAgICAgICAgICAgICAgIDEuIFByZXBvc2lzaSA8aT4oZGllIFByw6Rwb3NpdGlvbmVuKTwvaT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiIHBsLTRcIj5cbiAgICAgICAgICAgICAgICBQcmVwb3Npc2kgPGk+KGRpZSBQcsOkcG9zaXRpb25lbik8L2k+IGFkYWxhaCBrYXRhIHlhbmcgYmlhc2FueWFcbiAgICAgICAgICAgICAgICB0ZXJsZXRhayBkaSBkZXBhbiBmcmFzYSBub21pbmEgZGFuIG1lbmdodWJ1bmdha2FubnlhIGRlbmdhbiBrYXRhXG4gICAgICAgICAgICAgICAgbGFpbiBkYWxhbSBrYWxpbWF0LCBzZXBlcnRpIGRhbGFtIGJhaGFzYSBJbmRvbmVzaWEgZGksIGtlLCBkYXJpLlxuICAgICAgICAgICAgICAgIERhbGFtIGJhaGFzYSBKZXJtYW4ga2F0YSBkZXBhbiBzZWxhbHUgZGlpa3V0aSBkZW5nYW4ga2FzdXMsIGJhaWtcbiAgICAgICAgICAgICAgICBrYXN1cyBha2t1c2F0aXYsIGRhdGlmLCBha2t1c2F0aXYgZGF0aXYgYXRhdSBrYXN1cyBnZW5ldGlmLiBLYXRhXG4gICAgICAgICAgICAgICAgZGVwYW4gbWVtcGVuZ2FydWhpIHBlcnViYWhhbiBiZW50dWsga2F0YSBnYW50aSwga2F0YSBzYW5kYW5nLFxuICAgICAgICAgICAgICAgIGRla2xpbmFzaSBrYXRhIHNpZmF0YSBkYW4ga2F0YSBrZXRlcmFuZ2FuLlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb2ludDIgbWItNVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbWQgZm9udC1ib2xkXCI+XG4gICAgICAgICAgICAgICAgMi48aT4gRGllIFByw6Rwb3NpdGlvbmVuIG1pdCBkZW0gQWtrdXNhdGl2PC9pPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCIgcGwtNFwiPlxuICAgICAgICAgICAgICAgIDxpPkRpZSBQcsOkcG9zaXRpb25lbiBtaXQgZGVtIEFra3VzYXRpdjwvaT4gYWRhbGFoIHByZXBvc2lzaSB5YW5nXG4gICAgICAgICAgICAgICAgZGlpa3V0aSBrYXN1cyBha3VzYXRpZiAoQWtrdXNhdGl2KSwgeWFpdHUgOntcIiBcIn1cbiAgICAgICAgICAgICAgICA8aT5iaXMsIGR1cmNoLCBlbnRsYW5nLCBmw7xyLCBnZWdlbiwgb2huZSwgdW0gLHdpZGVyLjwvaT4gQ29udG9oXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGwtNFwiPlxuICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgYS5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICBCaXMgbsOkY2hzdGVuIEZyZWl0YWcgbXVzcyBkaWUgSGF1c2F1ZmdhYmUgdm9uIEhlcnJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFNhaGF0IGZlcnRpZyBzZWluXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2k+e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgKFNhbXBhaSBoYXJpIGp1bWF0IHlhbmcgYWthbiBkYXRhbmcgcGVrZXJqYWFuIHJ1bWFoIGRhcmlcbiAgICAgICAgICAgICAgICAgICAgICAgIFBhayBTYWhhdCBoYXJ1cyBzZWxlc2FpKS5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgYi4gPGk+SWNoIHR1ZSBhbGxlIGbDvHIgZGljaDwvaT4gKFNheWEgbGFrdWthbiBzZW11YW55YVxuICAgICAgICAgICAgICAgICAgICAgIHVudHVrbXUpLiBQcmVwb3Npc2kgPGk+ZsO8cjwvaT4gbWVuZ3ViYWggYmVudHVrIGthdGEgZ2FudGlcbiAgICAgICAgICAgICAgICAgICAgICBkdSBtZW5qYWRpIGRpY2guXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGMuIDxpPldpciBnZWhlbiBkaWU8L2k+IFN0cmHDn2UgSmFsYW4gUGFuY2luZyBlbnRsYW5nIChLaXRhXG4gICAgICAgICAgICAgICAgICAgICAgYmVyamFsYW4gZGkgc2VwYW5qYW5nIGphbGFuIFBhbmNpbmcpXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGQuIDxpPkljaCBiaW4gZ2VnZWIgZGVuIFBsYW48L2k+IChTYXlhIG1lbmVudGFuZyByZW5jYW5hXG4gICAgICAgICAgICAgICAgICAgICAgaXR1KS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgZS4gPGk+T2huZSBkaWNoIGdlaGUgaWNoIG5pY2h0PC9pPiAoIFRhbnBhIGVuZ2thdSBzYXlhXG4gICAgICAgICAgICAgICAgICAgICAgdGlkYWsgcGVyZ2kpXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGYue1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgIDxpPkluIGRlbSBlcnN0ZW4gRmlsbSBnZWh0IGVzIHVtIGRpZSBXZWxsZSBkZXIgU2Now7xsZXI8L2k+e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgIChGaWxtIHBlcnRhbWEgbWVuY2VyaXRha2FuIHRlbnRhbmcgYWt0aXZpdGFzIHNpc3dhKVxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBnLntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgICA8aT5adXNzYW1tZW5sZWJlbiBvaG5lIEhlaXJhdCBpc3Qgd2lkZXIgZGllIFJlbGlnaW9uPC9pPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgICAoSGlkdXAgYmVyc2FtYSB0YW5wYSBwZXJuaWthaGFuIGFkYWxhaCBiZXJ0ZW50YW5nYW4gZGVuZ2FuXG4gICAgICAgICAgICAgICAgICAgICAgYWdhbWEuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGgue1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgIDxpPkRpZSBicsO8Y2tlIHd1cmRlIGR1cmNoIGRpZSDDnGJlcnNjaHdlbW11bmYgemVyc3TDtnJ0PC9pPlxuICAgICAgICAgICAgICAgICAgICAgIChKZW1iYXRhbiBpdHUgZGloYW5jdXJrYW4gb2xlaCBiYW5qaXIpXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb2ludDMgbWItNVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbWQgZm9udC1ib2xkXCI+XG4gICAgICAgICAgICAgICAgMy4gPGk+IERpZSBQcsOkcG9zaXRpb25lbiBtaXQgZGVtIERhdGl2PC9pPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCIgcGwtNFwiPlxuICAgICAgICAgICAgICAgIDxpPkRpZSBQcsOkcG9zaXRpb25lbiBtaXQgZGVtIERhdGl2PC9pPiBhZGFsYWggcHJlcG9zaXNpIHlhbmdcbiAgICAgICAgICAgICAgICBkaWlrdXRpIGthc3VzIGRhdGlmIDxpPihEYXRpdik8L2k+LCB5YWl0dSA6e1wiIFwifVxuICAgICAgICAgICAgICAgIDxpPlxuICAgICAgICAgICAgICAgICAgYWIsIGF1cywgYXXDn2VyLCBiZWksIGRhbmssIGVudGdlZ2VuLCBlbnRzcHJlY2hlbmQsIGdlZ2Vuw7xiZXIsXG4gICAgICAgICAgICAgICAgICBnZW1hw58sIG1pdCwgbmFjaCwgbmVic3QgLHNhbXQsIHNlaXQsIHZvbiwgenUsIHp1Zm9sZ2UuXG4gICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIENvbnRvaCA6XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgIGEuIDxpPkFiIGtvbW1lbmRlciBXb2NoZSBnaWx0IGRlciBuZXVlIFN0dWRlbnBsYW48L2k+IChNdWxhaVxuICAgICAgICAgICAgICAgICAgICBtaW5nZ3UgeWFuZyBha2FuIGRhdGFuZyBiZXJsYWt1IGphZHdhbCBwZXJrdWxpYWhhbiB5YW5nXG4gICAgICAgICAgICAgICAgICAgIGJhcnUpLlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICBiLiA8aT5EYXMgTcOkZGNoZW4ga29tbXQgYXVzIGRlbSBIb3RlbDwvaT4gKEdhZGlzIGl0dSBkYXRhbmdcbiAgICAgICAgICAgICAgICAgICAgZGFyaSBIb3RlbCkuIEthdGEgZGVwYW4gPGk+YXVzPC9pPiBtZW5ndWJhaCBrYXRhIHNhbmRhbmd7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxpPmRhcyBIb3RlbDwvaT4gbWVuamFkdSA8aT5kZW0gSG90ZWw8L2k+LlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICBjLiA8aT5BdcOfZXIgZGVtIFZhdGVyIGtvbW10IGF1Y2ggZGVyIEJydWRlcjwvaT4gKFNlbGFpbiBheWFoXG4gICAgICAgICAgICAgICAgICAgIGRhdGFuZyBqdWdhIHNhdWRhcmEgbGFraS1sYWtpKS5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgZC57XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxpPlxuICAgICAgICAgICAgICAgICAgICAgIE1pdCBhbGxlbiBTdHVkZW50ZW4gdW5kIFN0dWRlbnRpbm5lbiBmYWhyZW4gd2lyIG5hY2ggQnVraXRcbiAgICAgICAgICAgICAgICAgICAgICBMYXdhbmdcbiAgICAgICAgICAgICAgICAgICAgPC9pPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgKERlbmdhbiBzZW11YSBtYWhhc2lzd2EgZGFuIG1haGFzaXN3aSBraXRhIHBlcmdpIGtlIEJ1a2l0XG4gICAgICAgICAgICAgICAgICAgIExhd2FuZykuXG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgIGUuIDxpPkljaCB0cmVmZmxlIGRpY2ggaGV1dGUgYmVpbSBHZXNjaMOkZnQgQWxmYXNhaGF0PC9pPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgKFNheWEgbWVuZW11aW11IGhhcmkgaW5pIGRpIGRla2F0IHRva28gJmFwb3M7QWxmYXPDpGhhdCkuXG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgIGYuIDxpPkRpZSBUb2NodGVyIGzDpHVmdCBzZWluZW0gVmF0ZXIgZW50Z2VnZW48L2k+IChBbmFrXG4gICAgICAgICAgICAgICAgICAgIHBlcmVtcHVhbiBpdHUgYmVybGFyaSBtZW55b25nc29uZyBheWFobnlhKS5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgZy57XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxpPkRpZSBGaXJtYSBiZXphaGx0IGlobiBzZWluZW4gTGVpc3R1bmdlbiBlbnRzcHJlY2hlbmQ8L2k+XG4gICAgICAgICAgICAgICAgICAgIChQZXJ1c2FoYWFuIG1lbWJheWFybnlhIHNlc3VhaSBkZW5nYW4gcHJlc3Rhc2kga2VyamFueWEpLlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICBoLntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgPGk+XG4gICAgICAgICAgICAgICAgICAgICAgRGVyIHN0YWF0bGljaGVuIFVuaXZlcnNpdMOkdCBNZWRhbiAoVU5JTUVEKSBnZWdlbsO8YmVyXG4gICAgICAgICAgICAgICAgICAgICAgd2VyZGVuIHZpZWxlIGtsZWluZSBLYW50aW5lbiBnZWJhdXRcbiAgICAgICAgICAgICAgICAgICAgPC9pPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgKERpIGRlcGFuIFVOSU1FRCBkaSBiYW5ndW4gYmFueWFrIGthbnRpbi1rYW50aW4ga2VjaWwpLlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICBpLntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgPGk+XG4gICAgICAgICAgICAgICAgICAgICAgRGllIFByw6RzaWRlbnRpbiB3aXJkIGdlbcOkw58gZGVyIG1laXN0ZW4gZGVyIFN0aW1tZW4gZ2V3w6RobHRcbiAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgICAgICAgICAoSWJ1IFByZXNpZGVuIGRpcGlsaWggbWVudXJ1dCBzdWFyYSB0ZXJiYW55YWspLlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICBqLiA8aT5OYWNoIGRlbSBNaXR0YWdlc3NlbiBnZWhlbiB3aXIgaW5zPC9pPiBLaW5vIChTZXRlbGFoXG4gICAgICAgICAgICAgICAgICAgIG1ha2FuIHNpYW5nIGtpdGEgcGVyZ2kga2UgYmlvc2tvcCkuXG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgIGsuIDxpPkVyIGxlaWh0IGRhcyBIZW1kIG5lYnN0IGRlciBLcmF3YXR0ZTwvaT4gKERpYSBtZW1pbmphbVxuICAgICAgICAgICAgICAgICAgICBrZW1lamEgYmVzZXJ0YSBkYXNpKS5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgbC4gPGk+RnJhdSBCYXJ0ZWxzIGhhdCBkaWUgS3JhbmtoZWl0IHNlaXQgZWluZW0gSmFocjwvaT57XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIChTZWphayBzZXRhaHVuIGluaSBGcmF1IEJhcnRlbHMgbWVuZGVyaXRhIHNha2l0KS5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgbS57XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxpPlxuICAgICAgICAgICAgICAgICAgICAgIERlciBQb2xpemlzdCB2ZXJoYWZ0ZXQgZGVuIERpZWIgc2FtdCBkZW0gQmV3ZWlzbWF0ZXJpYWxcbiAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgICAgICAgICAoUG9saXNpIG1lbmFuZ2thcCBwZW5jdXJpIGJlcnNhbWEgZGVuZ2FuIGJhcmFuZyBidWt0aSkuXG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgIG4uIDxpPkVyIHdlbMOfIG5pY2h0cyB2b24gc2VpbmVuIFTDtmNodGVybjwvaT4gKGxhIHRpZGFrIHRhaHVcbiAgICAgICAgICAgICAgICAgICAgYXBhLWFwYSB0ZW50YW5nIHB1dHJpLXB1dHJpbnlhKS5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgby57XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxpPlxuICAgICAgICAgICAgICAgICAgICAgIE1vcmdlbiBrb21tZSBpY2ggenUgZGlyIG5hY2ggSGF1c2UgKEJlc29rIHNheWEgZGF0YW5nIGtlXG4gICAgICAgICAgICAgICAgICAgICAgcnVtYWhtdSkuXG4gICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgcC57XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIDxpPlxuICAgICAgICAgICAgICAgICAgICAgIERlbiBOYWNocmljaHRlbiB6dWZvbGdlIHd1cmRlbiB3ZWdlbiBkZXIgaGVmdGlnZW5cbiAgICAgICAgICAgICAgICAgICAgICBSZWdlbmbDpGxsZSBlaW5pZ2UgS2VsbGVyIMO8YmVyZmx1dGV0IChNZW51cnV0IGJlcml0YSBha2liYXRcbiAgICAgICAgICAgICAgICAgICAgICBodWphbiBkZXJhcyBhaXIgZGkgYmViZXJhcGEgcnVhbmcgYmF3YWggdGFuYWggbWVsdWFwKS5cbiAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb2ludDQgbWItNVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbWQgZm9udC1ib2xkXCI+XG4gICAgICAgICAgICAgICAgNC4gPGk+RGllIFByw6Rwb3NpdGlvbmVuIG1pdCBBa2t1c2F0aXYgb2RlciBEYXRpdjwvaT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiIHBsLTRcIj5cbiAgICAgICAgICAgICAgICA8aT5EaWUgUHLDpHBvc2l0aW9uZW4gbWl0IEFra3VzYXRpdiBvZGVyIERhdGl2PC9pPiBhZGFsYWhcbiAgICAgICAgICAgICAgICBwcmVwb3Npc2kgeWFuZyBkYXBhdCBkaWlrdXRpIGthc3VzIGFrdXNhdGlmIGF0YXUga2FzdXMgZGF0aXZcbiAgICAgICAgICAgICAgICAoQWtrdXNhdGl2IG9kZXIgRGF0aXYpLCB5YWl0dTp7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGk+IGFuLCBhdWYsIGhpbnRlciwgaW4sIG5lYmVuLCDDvGJlciwgdW50ZXIsIHZvciwgendpc2NoZW4uPC9pPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxpPkNvbnRvaCA6IDwvaT5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8aT5cbiAgICAgICAgICAgICAgICAgIGFuIEFrazogSWNoIGjDpG5nZSBkYXMgQmlsZCBhbiBkaWUgV2FuZCAoU2F5YSBtZW5nZ2FudHVuZ2thblxuICAgICAgICAgICAgICAgICAgZ2FtYmFyIGtlIGRpbmRpbmcpLlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICBEYXQ6IERhcyBCaWxkIGjDpG5ndCBhbiBkZXIgV2FuZCAoR2FtYmFyIGl0dSB0ZXJnYW50dW5nIGRpXG4gICAgICAgICAgICAgICAgICBkaW5kaW5nKS4gS2V0ZXJhbmdhbjogQWtrIChBa2t1c2F0aXYpLCBEYXQgKERhdGl2KVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIGhpbnRlclxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEFrazogU3RlbGxzdCBkdSBkZWluIE1vdG9ycmFkIGhpbnRlciBkaWUgR2FyYWdlPyAoQXBha2FoXG4gICAgICAgICAgICAgICAgICBlbmdrYXUgbWVuYXJ1aCBzZXBlZGEgbW90b3JtdSBrZSBiZWxha2FuZyBnYXJhc2k/KSA8YnIgLz4gRGF0OlxuICAgICAgICAgICAgICAgICAgRGFzIE1vdHRvcmFkIHN0ZWh0IGhpbnRlciBkZXIgR2FyYWdlIChTZXBlZGEgbW90b3IgYmVyYWRhIGRpXG4gICAgICAgICAgICAgICAgICBiZWxha2FuZyBnYXJhc2kpLlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEluIDxiciAvPiBBa2s6IEVyIGtvbW10IGluIGRpZSBLbGFzc2UgKERpYSBtYXN1ayBrZSBrZWxhcykue1wiIFwifVxuICAgICAgICAgICAgICAgICAgPGJyIC8+IERhdDogRXIgaXN0IGpldHp0IGluIGRlciBLbGFzc2UgKERpYSBzZWthcmFuZyBiZXJhZGEgZGlcbiAgICAgICAgICAgICAgICAgIGRhbGFtIGtlbGFzKS5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICBOZWJlbiA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEFrazogRWluZSBTdHVkZW50aW4gc2V0enQgc2ljaCBuZWJlbiBlaW5lbiBTdHVkZW50ZW4gKFNlb3JhbmdcbiAgICAgICAgICAgICAgICAgIG1haGFzaXN3aSBkdWR1ayBrZSBzYW1waW5nIHNlb3JhbmcgbWFoYXNpc3dhKS4gPGJyIC8+IERhdDpcbiAgICAgICAgICAgICAgICAgIEVpbmUgTW9zY2hlZSBsaWVndCBuZWJlbiBlaW5lciBLaXJjaGUgKFNlYnVhaCBNYXNqaWQgYmVyYWRhIGRpXG4gICAgICAgICAgICAgICAgICBzYW1waW5nIHNlYnVhaCBHZXJlamEpLlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFVudGVyXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEFrazogTWVpbmUgTXV0dGVyIGxlZ3QgaWhyIGVpbiBLaXNzZW4gdW50ZXIgaWhyZW4gS29wZiAoSWJ1a3VcbiAgICAgICAgICAgICAgICAgIG1lbGV0YWtrYW4gc2VidWFoIGJhbnRhbCBrZSBiYXdhaCBrZXBhbGFueWEpLlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICBEYXQ6IE1laW4gU29obiBsaWVndCB1bnRlciBkZW0gQmF1bSAoUHV0cmFrdSBiZXJiYXJpbmcgZGlcbiAgICAgICAgICAgICAgICAgIGJhd2FoIHBvaG9uKS5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICBWb3JcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgQWtrOiBEYXMgTcOkZGNoZW4gc3RlbGx0IGRpZSBCbHVtZW4gdm9yIGRhcyBIYXVzIChHYWRpcyBpdHVcbiAgICAgICAgICAgICAgICAgIG1lbGV0YWtrYW4gYnVuZ2Ega2UgZGVwYW4gcnVtYWgpLlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICBEYXQ6IERhcyBGYWhycmFkdGF4aSBow6RsdCB2b3IgbWVpbmVtIEhhdXMgKEJlY2FrIGJlcmhlbnRpIGRcbiAgICAgICAgICAgICAgICAgIGRlcGFuIHJ1bWFoa3UpLlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFp3aXNjaGVuXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgQWtrOiBFaW4gU2Now7xsZXIgbGVndCBkZW4gRsO8bGxlciB6d2lzY2hlbiBkYXMgTGVocmJ1Y2ggdW5kXG4gICAgICAgICAgICAgICAgICBkYXNkaWNrZSBXw7ZydGVyYnVjaCAoU2VvcmFuZyBzaXN3YSBtZWxldGFra2FuIHB1bHBlbiBrZSBhbnRhcmFcbiAgICAgICAgICAgICAgICAgIGJ1a3UgYWphciBkYW4ga2FtdXMgdGViYWwpLlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICBEYXQ6IERlciBadWcgTGFuY2FuZyBLdW5pbmcgdmVya2VocnQgdMOkZ2xpY2ggendpc2NoZW4gZGVyXG4gICAgICAgICAgICAgICAgICBTdGFkdCBNZWRhbiB1bmQgZGVyIFN0YWR0IFRhbmp1bmcgQmFsYWkgKEtlcmV0YSBhcGkgTGFuY2FuZ1xuICAgICAgICAgICAgICAgICAgS3VuaW5nIGhpbGlyIG11ZGlrIHNldGlhcCBoYXJpIGFudGFyYSBrb3RhIE1lZGFuIGRhbiBrb3RhXG4gICAgICAgICAgICAgICAgICBUYW5qdW5nIEJhbGFpKS5cbiAgICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvaW50NSBtYi01XCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1tZCBmb250LWJvbGRcIj5cbiAgICAgICAgICAgICAgICA8aT4gNS4gRGllIFByw6Rwb3NpdGlvbmVuIG1pdCBkZW0gR2VuaXRpdjwvaT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiIHBsLTRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgRGllIFByw6Rwb3NpdGlvbmVuIG1pdCBkZW0gR2VuaXRpdiBpYWxhaCBwcmVwb3Npc2kgeWFuZyBkaWlrdXRpXG4gICAgICAgICAgICAgICAgICBrYXN1cyBnZW5pdGlmIChHZW5pdGl2KSwgeWFrbmk6IGFubMOkw59saWNoLCBhdcOfZXJoYWxiLCBiaW5uZW4sXG4gICAgICAgICAgICAgICAgICBkYW5rLCBpbm5lcmhhbGIsIHfDpGhyZW5kLCB6ZWl0LCBhYnNlaXRzLCBiZWlkZXJzZWl0LCBkaXNzZWl0cyxcbiAgICAgICAgICAgICAgICAgIGlubWl0dGVuLCBqZW5zZWl0cywgbMOkbmdzLCBvYmVyaGFsYiwgc2VpdGVucy8gdm9uIHNlaXRlbixcbiAgICAgICAgICAgICAgICAgIHVudGVyaGFsYiwgdW53ZWl0LCBhbmdlc2ljaHRzLCBhdWZncnVuZCwgaGFsYmVyLCBpbmZvbGdlLFxuICAgICAgICAgICAgICAgICAga3JhZnQsIGxhdXQsIG1hbmdlbHMsIHp1Z3Vuc3Rlbiwgd2VnZW4sIHRyb3R6LCBzdGF0dC9hbnN0YXR0LFxuICAgICAgICAgICAgICAgICAgYW5zdGVsbGUsIGFuaGFuZCwgbWl0aGlsZmUsIG1pdHRlbHMsIHZlcm3DtmdlLCB1bSB3aWxsZW4sXG4gICAgICAgICAgICAgICAgICB6d2Vja3MuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgQ29udG9oOlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGEuIERlciBuZXR0ZSBNZWtrYXBpbGdlciBsw6RkdCBzZWluZSBpc2xhbWlzY2hlbiBOYWNoYmFyblxuICAgICAgICAgICAgICAgICAgICAgIGFubMOkIMOfbGljaCBkZXMgNy4gVG9kZXN0YWdlcyBzZWluZXIgc2Now7ZuZW4gRnJhdSBlaW4sIHVtXG4gICAgICAgICAgICAgICAgICAgICAgenVzYW1tZW4gYXVzIGRlbSBLb3JhbiB6dSBsZXNlbiAoUGFrIEhhamkgeWFuZyBiYWlrIGhhdGlcbiAgICAgICAgICAgICAgICAgICAgICBpdHUgbWVuZ3VuZGFuZyB0ZXRhbmdnYW55YSB5YW5nIGJlcmFnYW1hIElzbGFtIHVudHVrXG4gICAgICAgICAgICAgICAgICAgICAgbWVtYmFjYSBBbHF1ciZhcG9zO2FuIGJlcnNhbWEgZGkgcnVtYWhueWEgc2VodWJ1bmdhblxuICAgICAgICAgICAgICAgICAgICAgIGRlbmdhbiB0dWp1aCBoYXJpIGtlbWF0aWFuIGlzdHJpbnlhIHlhbmcgY2FudGlrKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgYi4gSmV0enQgd29obnQgSGVyciBTYWhhdCBhdcOfZXJoYWxiIGRlciBncm9zc2VuIFN0YWR0XG4gICAgICAgICAgICAgICAgICAgICAgTWVkYW4gKFNla2FyYW5nIFBhayBTYWhhdCB0aW5nZ2FsIGRpIGx1YXIga290YSBiZXNhclxuICAgICAgICAgICAgICAgICAgICAgIE1lZGFuKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgYy4gSW5uZXJoYWxiIGVpbmVzIEphaHJlcyBtdXNzdCBkdSBEZXV0c2NoIHNwcmVjaGVuIGvDtm5uZW5cbiAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAoRGFsYW0gd2FrdHUgc2F0dSB0YWh1biBlbmdrYXUgaGFydXMgZGFwYXQgYmVyYmljYXJhXG4gICAgICAgICAgICAgICAgICAgICAgYmFoYXNhIEplcm1hbikuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGQuIEJpbm5lbiBlaW5lcyBNb25hdHMgbXVzcyBkZXIgTWlldGVyIHVtemllaGVuIChEYWxhbVxuICAgICAgICAgICAgICAgICAgICAgIHdha3R1IHNhdHUgYnVsYW4gcGVueWV3YSBpdHUgaGFydXMgcGluZGFoKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgZS4gRGFuayBkZWluZXIgSGlsZmUga2FubiBpY2ggbWVpbiBXw7ZydGVyYnVjaCB3aWVkZXJcbiAgICAgICAgICAgICAgICAgICAgICBmaW5kZW4gKEJlcmthdCBiYW50dWFubXUgc2F5YSBkYXBhdCBtZW5lbXVrYW4ga2FtdXMgc2F5YVxuICAgICAgICAgICAgICAgICAgICAgIGtlbWJhbGkpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBmLiBXw6RocmVuZCBkZXIgVm9ybGVzdW5nIGlzdCBlciBpbW1lciBzY2hsw6RmcmlnIChTZWxhbWFcbiAgICAgICAgICAgICAgICAgICAgICBwZXJrdWxpYWhhbiBpYSBzZWxhbHUgbWVuZ2FudHVrKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgZy4gRXIgaGF0IHplaXQgc2VpbmVzIFN0dWRpdW1zIHZpZWxlIELDvGNoZXIgZ2VsZXNlblxuICAgICAgICAgICAgICAgICAgICAgIChTZWxhbWEga3VsaWFoIGRpYSB0ZWxhaCBiYW55YWsgbWVtYmFjYSBidWt1KS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgaC4gTWVpbiBIYXVzIGlzdCBhYnNlaXRzIGRlciBhbmRlcmVuIEjDpHVzZXIgdm9uIGRlclxuICAgICAgICAgICAgICAgICAgICAgIEJldsO2bGtlcnVuZyAoUnVybmFoa3UgdGVycGlzYWggZGFyaSBydW1haC1ydW1haCBwZW5kdWR1a1xuICAgICAgICAgICAgICAgICAgICAgIGxhaW55YSkuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGkuIEJlaWRlcnNlaXRzIGRlciBTdHJhw59lIHNpbmQgdmllbGUgZWluZmFjaGUgSMOkdXNlciAoRGlcbiAgICAgICAgICAgICAgICAgICAgICBrZWR1YSBzaXNpIGphbGFuIGJlcmRpcmkgYmFueWFrIHJ1bWFoLXJ1bWFoIHNlZGVyaGFuYSkuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGouIERhcyBmcmllZGxpY2hlIERvcmYgbGllZ3QgZGllc3NlaXRzIGRlcyBGbHVzc2VzIChEZXNhXG4gICAgICAgICAgICAgICAgICAgICAgeWFuZyBkYW1haSBpbmkgbGV0YWtueWEgZGkgc2ViZWxhaCBzdW5nYWkpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBrLiBFciB2ZXJzdGVja3Qgc2ljaCBpbm1pdHRlbiBkZXMgV2FsZGVzIChJYSBiZXJzZW1idW55aVxuICAgICAgICAgICAgICAgICAgICAgIGRpIHRlbmdhaCBodXRhbikuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGwuIEplbnNlaXRzIGRlciBCcsO8Y2tlIHN0ZWh0IGVpbmUgTW9zY2hlZSAoRGkgc2ViZXJhbmdcbiAgICAgICAgICAgICAgICAgICAgICBqZW1iYXRhbiBpdHUgYmVyZGlyaSBzZWJ1YWggTWFzamlkKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgbS4gTMOkbmdzIGRlcyBaYXVucyB3ZXJkZW4gdmllbGUgUG9zdGVyIGFuZ2VrbGVidCAoRGlcbiAgICAgICAgICAgICAgICAgICAgICBzZXBhbmphbmcgcGFnYXIgZGl0ZW1wZWxpIGJhbnlhayBwb3N0ZXIpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBuLiBWaWVsZSBCYXVlcm4gd29obmVuIG9iZXJoYWxiIGplbmVzIERvcmZlcyAoQmFueWFrXG4gICAgICAgICAgICAgICAgICAgICAgcGV0YW5pIHRpbmdnYWwgZGkgZGF0YXJhbiB0aW5nZ2kpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBvLiBTZWl0ZW5zIHVuc2VyZXIgR3J1cHBlIHNpbmQgYWxsZSBtaXQgZGVtIFBsYW5cbiAgICAgICAgICAgICAgICAgICAgICBlaW52ZXJzdGFuZGVuIChEYXJpIHBpaGFrIGtlbG9tcG9rIGthbWkgc2VtdWFueWEgc2V0dWp1XG4gICAgICAgICAgICAgICAgICAgICAgZGVuZ2FuIHJlbmNhbmEgdGVyc2VidXQpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBwLiBVbnRlcmhhbGIgdW5zZXJlcyBIYXVzZXMgaXN0IGVpbiBrbGVpbmVyIFNlZSAoS2UgYXJhaFxuICAgICAgICAgICAgICAgICAgICAgIGhpbGlyIGRhcmkgcnVtYWgga2FtaSB0ZXJkYXBhdCBzZWJ1YWggZGFuYXUga2VjaWwpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBxLiBVbndlaXQgZGVzIE1lZGFucyBIYXVwdGJhaG5ob2ZzU3Rhc2l1biBLZXJldGEgQXBpIE1lZGFoXG4gICAgICAgICAgICAgICAgICAgICAgaXN0IGVpbiBncm/Dn2VzIEhvdGVsIChUaWRhayBqYXVoIGRhcmkmYXBvcztTdGFzaXVuIEtlcmV0YVxuICAgICAgICAgICAgICAgICAgICAgIEFwaSBNZWRhcmkgYWRhbGFoIHNlYnVhaCBob3RlbCBiZXNhcikuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIHIuIEFuZ2VzaWNodHMgc2VpbmVyIEFycm9nYW56IGhhYmUgaWNoIGtlaW5lIEx1c3QgbWVocixcbiAgICAgICAgICAgICAgICAgICAgICBtaXQgaWhtIHp1IHNwcmVjaGVuIChNZW5naW5nYXQga2Vzb21ib25nYW5ueWEgc2F5YSB0aWRha1xuICAgICAgICAgICAgICAgICAgICAgIHB1bnlhIGtlaW5naW5hbiBsYWdpIHVudHVrIGJlcmJpY2FyYSBkZW5nYW5ueWEpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBzLiBBdWZncnVuZCBkZXMgRXJnZWJuaXNzZXMgZGVyIFByw7xmdW5nIHVuZCBkZXIgU2VtZXN0ZXJcbiAgICAgICAgICAgICAgICAgICAgICBhdWZnYWJlIGJla29tbXQgZXIgZGllIE5vdGUgJmFwb3M7RSZhcG9zOyAoQmVyZGFzYXJrYW5cbiAgICAgICAgICAgICAgICAgICAgICBoYXNpbCB1amlhbiBkYW4gdHVnYXMgc2VtZXN0ZXIgZGlhIG1lbmRhcGF0IG5pbGFpIEUpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICB0LiBEZXIgR2VzdW5kaGVpdCBoYWxiZXIgaMO2cnQgZGVyIFBhcmt3w6RjaHRlciBhdWYgenVcbiAgICAgICAgICAgICAgICAgICAgICByYXVjaGVuIChEZW1pIGtlc2VoYXRhbiBwZW5qYWdhIHBhcmtpciBiZXJoZW50aSBtZXJva29rKS5cbiAgICAgICAgICAgICAgICAgICAgICB1LiBJbmZvbGdlIHNlaW5lciBGYXVsaGVpdCBibGVpYnQgbWVpbiBqdW5nZXJlciBCcnVkZXJcbiAgICAgICAgICAgICAgICAgICAgICBzaXR6ZW5cbiAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgKEthcmVuYSBrZW1hbGFzYW5ueWEgYWRpayBzYXlhIHRpbmdnYWwga2VsYXMpLiB2LiBXaXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvbW1lbiBrcmFmdCBJaHJlciBFaW5sYWR1bmcgaGllcmhlciAoS2FtaSBkYXRhbmcga2VtYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJlcmRhc2Fya2FuIHVuZGFuZ2FuIEFuZGEpLlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICB3LiBMYXV0IFBhcmFncmFwaCAxIGRlciBFcsO2ZmZudW5nIGRlcyBHcnVuZGVnZXNldHpzIGRlclxuICAgICAgICAgICAgICAgICAgICAgIFJlcHVibGlrIEluZG9uZXNpZW4gMTk0NSBpc3QgRnJlaWhlaXQgZGFzIFJlY2h0IGFsbGVyXG4gICAgICAgICAgICAgICAgICAgICAgTmF0aW9uZW4gKE1lbnVydXQgYWxpbmVhIHBlcnRhbWEgcGVtYnVrYWFuIFVVRCBSSSAxOTQ1XG4gICAgICAgICAgICAgICAgICAgICAga2VtZXJkZWthYW4gYWRhbGFoIGhhayBzZWdhbGEgYmFuZ3NhKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgeC4gRXIgaGF0IEJlcmktQmVyaS1TY2htZXJ6ZW4gbWFuZ2VscyBWaXRhbWluIEIgKERpYVxuICAgICAgICAgICAgICAgICAgICAgIG1lbmRlcml0YSBwZW55YWtpdCBiZXJpLWJlcmkga2FyZW5hIGt1cmFuZyB2aXRhbWluIEIpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICB5LiBEZXIgVmF0ZXIgYXJiZWl0ZXQgVGFnIHVuZCBOYWNodCB6dWd1bnN0ZW4gc2VpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgS2luZGVyIChBeWFoIGJla2VyamEgc2lhbmcgZGFuIG1hbGFtIGRlbWkgYW5hay1hbmFrbnlhKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgei4gV2VnZW4gZGVyIHNjaHdlcmVuIEtyYW5raGVpdCBibGVpYnQgZXIgenUgSGF1c2UgKEthcmVuYVxuICAgICAgICAgICAgICAgICAgICAgIHNha2l0IGRpYSB0aW5nZ2FsIGRpIHJ1bWFoKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgYWEuIFRyb3R6IHNlaW5lciBFaHJsaWNoa2VpdCBnbGF1YnQgaWhtIG5pZW1hbmQgKE1lc2tpcHVuXG4gICAgICAgICAgICAgICAgICAgICAgZGlhIGp1anVyIHRhayBzZW9yYW5ncHVuIHBlcmNheWEga2VwYWRhbnlhKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgYmIuIFN0YXR0IHNlaW5lciBqdW5nZXJlbiBTY2h3ZXN0ZXIgaXN0IHNlaW5lIFRhbnRlXG4gICAgICAgICAgICAgICAgICAgICAgZ2Vrb21tZW4gKFRhbnRlbnlhIGRhdGFuZyBtZW5nZ2FudGlrYW4gYWRpa255YSkuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGNjLiBBbnN0ZWxsZSBkZXIgRG96ZW50aW4gZGVzIEZhY2hzIFN0cnVrdHVlbiBJSSBrb21tZSBpY2hcbiAgICAgICAgICAgICAgICAgICAgICBpbiBkaWUgS2xhc3NlLCB1bSBkaWUgVm9ybGVzdW5nIHp1IGhhbHRlbiAoU2ViYWdhaSBnYW50aVxuICAgICAgICAgICAgICAgICAgICAgIElidSBEb3NlbiBNYXRhIEt1bGlhaCBTdHJ1a3R1cmVuIElJIHNheWEgbWFzdWsga2Uga2VsYXNcbiAgICAgICAgICAgICAgICAgICAgICBtZW1iZXJpa2FuIHBlcmt1bGlhaGFuKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgZGQuIEFuaGFuZCBkZXIgRGF0ZW4ga2F1ZmVuIGRpZSBTdHVkZW50aW5uZW4gbGllYmVyIGRlblxuICAgICAgICAgICAgICAgICAgICAgIExpcHBlbnN0aWZ0IGFscyBkYXMgV8O2cnRlcmJ1Y2ggKEJlcmRhc2Fya2FuIGRhdGEtZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICBtYWhhc2lzd2kgbGViaWggc3VrYSBtZW1iZWxpIGxpcHN0aWsgZGFyaSBwYWRhIGthbXVzKS5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIiBtYi00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgZWUuIERlciBrYXB1dHRlIENvbXB1dGVyIGthbm4gbnVyIG1pdCBIaWxmZSBlaW5lc1xuICAgICAgICAgICAgICAgICAgICAgIENvbXB1dGVyZmFjaG1hbm4gcmVwYXJpZXJ0IHdlcmRlbiAoS29tcHV0ZXIgeWFuZyBydXNhayBpbmlcbiAgICAgICAgICAgICAgICAgICAgICBoYW55YSBkYXBhdCBkaXBlcmJhaWtpIGRlbmdhbiBiYW50dWFuIGFobGkga29tcHV0ZXIpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBmZi4gTWl0dGVscyBlaW5lcyBIYW1tZXJzIGthbm4gc2llIGRpZSBHbGFzdMO8ciDDtmZmbmVuXG4gICAgICAgICAgICAgICAgICAgICAgKERlbmdhbiBiYW50dWFuIHNlYnVhaCBtYXJ0aWwgZGlhIGRhcGF0IG1lbWJ1a2EgcGludHUga2FjYVxuICAgICAgICAgICAgICAgICAgICAgIGl0dSkuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGdnLiBWZXJtw7ZnZSBzZWluZXIgc3RhcmtlbiBLcmFmdCBrYW5uIGVpbiBMw6R1ZmVyIDUwIGttIHp1XG4gICAgICAgICAgICAgICAgICAgICAgRnXDnyBnZWhlbiAoS2FyZW5hIHRlbmFnYW55YSB5YW5nIGt1YXQgc2VvcmFuZyBwZWxhcmkgbWFtcHVcbiAgICAgICAgICAgICAgICAgICAgICBiZXJqYWxhbiBrYWtpIHNlamF1aCA1MCBLbSkuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCIgbWItNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIGhoLiBVbSBkZXIgZW5nZW4gRnJldW5kc2NoYWZ0IHdpbGxlbiBrb21tdCBlciBhdWNoIGVuZGxpY2hcbiAgICAgICAgICAgICAgICAgICAgICBuYWNoIEJ1a2l0IExhd2FuZyBtaXQgKERlbWkgcGVyc2FoYWJhdGFuIHlhbmcgZXJhdFxuICAgICAgICAgICAgICAgICAgICAgIGFraGlybnlhIGlhIGlrdXQganVnYSBrZSBCdWtpdCBMYXdhbmcpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiIG1iLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICBpaS4gWndlY2tzIGJlc3NlcmVyIE5vdGVuIGxlcm50IGVyIHZpZWwgenUgSGF1c2UgKERlbWlcbiAgICAgICAgICAgICAgICAgICAgICBuaWxhaSB5YW5nIGxlYmloIGJhaWsgZGlhIGJlbGFqYXIga2VyYXMgZGkgcnVtYWgpLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICBQZW5nZWxvbXBva2FuIGthdGEgZGVwYW4gZGFsYW0gYmFoYXNhIEplcm1hbiBzZXBlcnRpIHBhZGFcbiAgICAgICAgICAgICAgICAgICAgZ2FtYmFyIDQgKEJpbGQgNCkuXG4gICAgICAgICAgICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgICAgICAgICAgIHNyYz1cIi9QaWN0dXJlMV9tYXRlcmkxLmpwZ1wiIC8vIFJvdXRlIG9mIHRoZSBpbWFnZSBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgYWx0PVwiWW91ciBOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17NTAwfVxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD17NTAwfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvaW50NiBtYi01XCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1tZCBmb250LWJvbGRcIj5cbiAgICAgICAgICAgICAgICA2LiA8aT5EYXMgUHLDpHBvc2l0aW9uYWxwcm9ub21lbiAoS2F0YSBkZXBhbiBwZW5nZ2FudGkpPC9pPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCIgcGwtNFwiPlxuICAgICAgICAgICAgICAgIFByZXBvc2lzaSBwZW5nZ2FudGkgKFByw6Rwb3NpdGlvbmFscHJvbm9tZW4pIGRpYmVudHVrIGRlbmdhbiBwb2xhXG4gICAgICAgICAgICAgICAgZGEgKyBQcsOkcG9zaXRpb24uIEppa2EgcHJlcG9zaXNpIGRpbXVsYWkgZGVuZ2FuIHZva2FsLCBtYWthXG4gICAgICAgICAgICAgICAgYW50YXJhIGRhLi4uIFByw6Rwb3NpdGlvbiBkaXNlbGlwa2FuIGh1cnVmIHIuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgQ29udG9oOlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIGRhKyBhdWYgPSBkYXJhdWYgKGRpIGF0YXNueWEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgZGEgKyBhbiA9IGRhcmFuIChwYWRhLCBha2FuLCBtZW5nZW5haSBoYWwgaXR1KVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIGRhICsgdW0gPSBkYXJ1bSAobWFrYSwgb2xlaCBzZWJhYiBpdHUsIGthcmVuYSBpdHUpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgZGEgKyBpbiA9IGRhcmluIChkaSBkYWxhbW55YSlcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBkYSArIHVudGVyID0gZGFydW50ZXIgKGRpIGJhd2FobnlhLCBkaSBhbnRhcmFueWEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgZGEgKyDDvGJlciA9IGRhcsO8YmVyIChtZW5nZW5haSwgdGVudGFuZyBpdHUpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgZGEgKyBmw7xyID0gZGFmw7xyICh1bnR1ayBpdHUsIGthcmVuYSBpdHUpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgZGEgKyBnZWdlbiA9IGRhZ2VnZW4gKG1lbGF3YW4pXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgZGEgKyBuYWNoID0gZGFuYWNoIChtZW51cnV0IGl0dSlcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBkYSArIHZvbiA9IGRhdm9uIChkYXJpIGl0dSwgZGFyaSBwYWRhbnlhKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIGRhKyB6dSA9IGRhenUgKHVudHVrIG1ha3N1ZCBpdHUsIHRlbnRhbmcgaXR1KVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIFByZXBvc2lzaSBwZW5nZ2FudGkgZGliZW50dWsgbWVudXJ1dCBwb2xhIHdvICsgUHLDpHBvc2l0aW9uIEppa2FcbiAgICAgICAgICAgICAgICBwcmVwb3Npc2kgZGltdWxhaSBkZW5nYW4gdm9rYWwsIG1ha2EgYW50YXJhIHdvICsgUHLDpHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgZGlzZWxpcGthbiBodXJ1ZiByXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgQ29udG9oOlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIHdvKyBhbiA9IHdvcmFuIChha2FuIGFwYSwgeWFuZylcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICB3byArIGF1ZiA9IHdvcmF1ZiAoYXBhLCBtYW5hLCB5YW5nKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIHdvKyDDvGJlciA9IHdvcsO8YmVyIChtZW5nZW5hbCwgdGVudGFuZyBhcGEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgd28rIGluID0gd29yaW4gKGRpIG1hbmEsIHlhbmcgbWFuYSlcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICB3byArIHVudGVyID0gd29ydW50ZXIgKGRpIGFudGFyYSBhcGEsIG1hbmEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgd28gKyBhdXM9IHdvcmF1cyAoZGFyaSBhcGEsIG1hbmEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgd28rIHVtID0gd29ydW0gKHRlbnRhbmcgYXBhKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIHdvICsgZ2VnZW4gPSB3b2dlZ2VuIChtZWxhd2FuIGFwYSkgd29taXQgd29taXQgKGRlbmdhbiBhcGEsXG4gICAgICAgICAgICAgICAgYmFnYWltYW5hKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIHdvICsgbmFjaCA9IHdvbmFjaCAodGVudGFuZyBhcGEsIGtlcGFkYSBhcGEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgd28gKyBkdXJjaCA9IHdvZHVyY2ggKGthcmVuYSBhcGEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgd28gKyBiZWwgPSB3b2JlbCAocGFkYSBtYW5hLCBkYWxhbSBoYWwgYmFnYWltYW5hKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIHdvICsgZsO8ciA9IHdvZsO8ciAodW50dWsgYXBhLCB1bnR1ayBoYWwgeWFuZyBtYW5hKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIHdvICsgdm9uID0gd292b24gKHRlbnRhbmcgYXBhLCBkYXJpIGFwYSlcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICB3byArIHZvciA9IHdvdm9yICh0ZXJoYWRhcC9ha2FuIHNpYXBhKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIHdvKyB6dSA9IHdvenUgKHVudHVrIGFwYSwgdGVybWFzdWsgeWFuZyBtYW5hKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIEZyYXNlIGRhICsgUHLDpHBvc2l0aW9uIGRhbiB3byArIFByw6Rwb3NpdGlvbiBoYW55YSBkaWd1bmFrYW4gcGFkYVxuICAgICAgICAgICAgICAgIGJlbmRhIGRhbiBrZWFkYWFuLCBidWthbiBrZXBhZGEgb3JhbmcuIEtlcGFkYSBvcmFuZyBkaWd1bmFrYW5cbiAgICAgICAgICAgICAgICBQaHJhc2U6XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgUHLDpHBvc2l0aW9uICsgRnJhZ2V3b3J0OlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIGbDvHIgd2VuPyAodW50dWsgc2lhcGE/KVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIG1pdCB3ZW0/IChkZW5nYW4gc2lhcGE/KVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIGF1ZiB3ZW4/IChwYWRhIHNpYXBhPylcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICDDvGJlciB3ZW4/ICh0ZW50YW5nIHNpYXBhPylcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBQcsOkcG9zaXRpb24gKyBQZXJzb25hbHByb25vbWVuOlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIGbDvHIgaWhuICh1bnR1a255YSlcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBtaXQgaWhtIChkZW5nYW5ueWEpXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgYXVmIGlobiAocGFkYW55YSlcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICDDvGJlciBpaG4gKHRlbnRhbmcgZGlhKVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIGJlbCBTYWNoZW46IHdvKHIpICsgUHLDpHBvc2l0aW9uOyBkYShyKSArIFByw6Rwb3NpdGlvbmVuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgYS4gU2FoYXQ6IFdvcsO8YmVyIMOkcmdlcnN0IGR1IGRpY2g/IChUZXJoYWRhcCBhcGEgZW5na2F1IG1lcmFzYVxuICAgICAgICAgICAgICAgIGplbmdrZWw/KVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIEFyaWFuaTogSWNoIMOkcmdlcmUgbWljaCDDvGJlciBkZW4gRmlsbSAoU2F5YSBtZXJhc2EgSmVuZ2tleVxuICAgICAgICAgICAgICAgIHRlcmhhZGFwIGZpbG0gaXR1KSxcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2PmF0YXU8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvUGljdHVyZTJfbWF0ZXJpMS5wbmdcIiAvLyBSb3V0ZSBvZiB0aGUgaW1hZ2UgZmlsZVxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJZb3VyIE5hbWVcIlxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17NTB9XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD17NTB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIEFyaWFuaTogSWNoIMOkcmdlcmUgbWljaCBkYXLDvGJlciAoU2F5YSBtZXJhc2EgamVuZ2tlbCB0ZXJoYWRhcFxuICAgICAgICAgICAgICAgIGZpbG0gaXR1KS5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9QaWN0dXJlM19tYXRlcmkxLnBuZ1wiIC8vIFJvdXRlIG9mIHRoZSBpbWFnZSBmaWxlXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJZb3VyIE5hbWVcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9ezUwfVxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PXs1MH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIGRhcnViZXIgbWVuZ2dhbnRpa2FuIMO8YmVyIGRlbiBGaWxtXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgYi4gU2FoYXQ6IFdvZsO8ciBpbnRlcmVzc2llcnN0IGR1IGRpY2ggYW0gbWVpc3RlbiBpbSBGZXJuc2VoZW4/XG4gICAgICAgICAgICAgICAgKFRlcnRhcmlrIHBhZGEgYXBha2FoIGVuZ2thdSBiaWFzYW55YSBwYWRhIHNpYXJhbiB0ZWxldmlzaT8pXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgQXJpYW5pOiBJY2ggaW50ZXJlc3NpZXJlIG1pY2ggZsO8ciBTcG9ydCAoU2F5YSB0ZXJ0YXJpayBwYWRhIG9sYWhcbiAgICAgICAgICAgICAgICByYWdhKSwgYXRhdVxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIEFyaWFuaTogRGFmw7xyIGludGVyZXNzaWVyZSBpY2ggbWljaCBuaWNodC4gRGFzIGZpbmRlIGljaFxuICAgICAgICAgICAgICAgIGxhbmd3ZWlsaWcgKFNheWEgdGlkYWsgdGVydGFyaWsgcGFkYSBvbGFoIHJhZ2EuIE1lbnVydXQgc2F5YSBpdHVcbiAgICAgICAgICAgICAgICBtZW1ib3NhbmthbikuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgYy4gQXJhOiBXb21pdCBiaXN0IGR1IG5pY2h0IGVpbnZlcnN0YW5kZW4/IChEZW5nYW4gYXBhIGVuZ2thdSAoXG4gICAgICAgICAgICAgICAgdGlkYWsgc2V0dWp1PylcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBBcmk6IE1pdCBkZWluZW0gUGxhbiAoRGVuZ2FuIHJlbmNhbmFtdSkuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgQXJhIERhbWl0IHNpbmQgYWxsZSBlaW52ZXJzdGFuZGVuLCBudXIgZHUgbmljaHQgKERlbmdhbiByZW5jYW5hXG4gICAgICAgICAgICAgICAgaXR1IHNlbXVhIHNldHVqdSwgaGFueWEgZW5na2F1IHlhbmcgdGlkYWsgc2V0dWp1KS5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBiZWkgUGVyc29uZW46IFByw6Rwb3NpdGlvbmVuICsgRnJhZ2V3b3J0OyBQcsOkcG9zaXRpb24gK1xuICAgICAgICAgICAgICAgIFBlcnNvbmFscHJvbm9tZW5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBDb250b2g6XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgYS4gQXJhOiDDnGJlciB3ZW4gw6RyZ2Vyc3QgZHUgZGljaD8gKFBhZGEgc2lhcGEgZW5na2F1IGtlc2FsPylcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBBcmk6IEljaCDDpHJnZXJlIG1pY2ggw7xiZXIgZGVuIE1vZGVyYXRvciAoU2F5YSBtZXJhc2Ega2VzYWwgcGFkYVxuICAgICAgICAgICAgICAgIG1vZGVyYXRvcilcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9QaWN0dXJlNF9tYXRlcmkxLnBuZ1wiIC8vIFJvdXRlIG9mIHRoZSBpbWFnZSBmaWxlXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJZb3VyIE5hbWVcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9ezUwfVxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PXs1MH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIEFteTogSWNoIMOkcmdlcmUgbWljaCBhdWNoIMO8YmVyIGlobi5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBLZXRlcmFuZ2FuOiBpaG4gbWVuZ2dhbnRpa2FuIGRlbiBNb2RlcmF0b3IuXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1mbGV4IHctZnVsbCBtdC02IHNtOnctYXV0b1wiPlxuICAgICAgICAgICAgPExpbmtcbiAgICAgICAgICAgICAgaHJlZj1cIi9sYXRpaGFuMVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LWZ1bGwgcHgtNiBweS0yIHRleHQtd2hpdGUgZHVyYXRpb24tMzAwIGJnLWJsdWUtNjAwIHJvdW5kZWQtbGcgaG92ZXI6YmctYmx1ZS01MDAgZm9jdXM6cmluZyBmb2N1czpyaW5nLWJsdWUtMzAwIGZvY3VzOnJpbmctb3BhY2l0eS04MFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIMOcYnVuZ1xuICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj4gKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiIHB4LTIgbGc6cHgtMTAgcHktMTIgbXgtYXV0byAgaC1mdWxsIFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiIGgtZnVsbCBvdmVyZmxvdy15LWF1dG8gdGV4dC1qdXN0aWZ5ICBtaW4taC1bMTAwdmhdIHRleHQtMnhsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlcjEgZm9udC1ib2xkIHRleHQtM3hsIGl0ZW1zLWNlbnRlciB0ZXh0LWNlbnRlciBtYi01XCI+XG4gICAgICAgICAgICAgIERpZSBQcsOkcG9zaXRpb25lblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLTVcIj5cbiAgICAgICAgICAgICAgUHLDpHBvc2l0aW9uZW4gc2luZCBXw7ZydGVyLCBkaWUgaW4gZGVyIFJlZ2VsIHZvciBlaW5lclxuICAgICAgICAgICAgICBTdWJzdGFudGl2cGhyYXNlIHN0ZWhlbiB1bmQgZGllc2UgbWl0IGFuZGVyZW4gV8O2cnRlcm4gaW0gU2F0elxuICAgICAgICAgICAgICB2ZXJiaW5kZW4sIHdpZSB6LiBCLiBpbSBJbmRvbmVzaXNjaGVuIGRpLCBrZSwgZGFyaS4gSW0gRGV1dHNjaGVuXG4gICAgICAgICAgICAgIGZvbGd0IGF1ZiBQcsOkcG9zaXRpb25lbiBpbW1lciBlaW4gS2FzdXMsIGVudHdlZGVyIGRlciBBa2t1c2F0aXYsXG4gICAgICAgICAgICAgIERhdGl2LCBBa2t1c2F0aXYtRGF0aXYgb2RlciBHZW5pdGl2LiBQcsOkcG9zaXRpb25lbiB2ZXLDpG5kZXJuIGRpZVxuICAgICAgICAgICAgICBGb3JtIHZvbiBQcm9ub21lbiwgQXJ0aWtlbG4sIERla2xpbmF0aW9uZW4gdW5kIEFkdmVyYmllbi5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCB3LWZ1bGwgIHNtOnctYXV0b1wiPlxuICAgICAgICAgICAgPExpbmtcbiAgICAgICAgICAgICAgaHJlZj1cIi9sYXRpaGFuMVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LWZ1bGwgcHgtNiBweS0yIHRleHQtd2hpdGUgZHVyYXRpb24tMzAwIGJnLWJsdWUtNjAwIHJvdW5kZWQtbGcgaG92ZXI6YmctYmx1ZS01MDAgZm9jdXM6cmluZyBmb2N1czpyaW5nLWJsdWUtMzAwIGZvY3VzOnJpbmctb3BhY2l0eS04MFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIMOcYnVuZ1xuICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJMaW5rIiwiYmdNYXRlcmkiLCJNYXRlcmkxIiwiZGl2IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJzcmMiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJzZWN0aW9uIiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/materi1/page.tsx\n"));

/***/ })

});